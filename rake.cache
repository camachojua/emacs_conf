#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("/home/juan/Src/buk-webapp/" ("about                                                          # List versions of all Rails frameworks and the environment" "action_mailbox:ingress:environment                             # " "action_mailbox:ingress:exim                                    # Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:postfix                                 # Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:qmail                                   # Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:install                                         # Installs Action Mailbox and its dependencies" "action_mailbox:install:migrations                              # Copy migrations from action_mailbox to application" "action_text:install                                            # Copy over the migration, stylesheet, and JavaScript files" "action_text:install:migrations                                 # Copy migrations from action_text to application" "active_storage:install                                         # Copy over the migration needed to the application" "active_storage:install:migrations                              # " "active_storage:update                                          # " "annotate_models                                                # Add schema information (as comments) to model and fixture files" "annotate_routes                                                # Adds the route map to routes.rb" "apartment:create                                               # Create all tenants" "apartment:drop                                                 # Drop all tenants" "apartment:migrate                                              # Migrate all tenants" "apartment:migrate:down                                         # Runs the \"down\" for a given migration VERSION across all tenants" "apartment:migrate:redo                                         # Rolls back the tenant one migration and re migrate up (options: STEP=x, VERSION=x)" "apartment:migrate:up                                           # Runs the \"up\" for a given migration VERSION across all tenants" "apartment:rollback                                             # Rolls the migration back to the previous version (specify steps w/ STEP=n) across all tenants" "apartment:seed                                                 # Seed all tenants" "app:binstub:yarn                                               # " "app:template                                                   # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                                             # " "app:update                                                     # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:active_storage                                      # " "app:update:bin                                                 # " "app:update:configs                                             # " "app:update:upgrade_guide_info                                  # " "arel_extensions:install_functions                              # Install DB functions into current DB" "assets:clean[keep]                                             # Remove old compiled assets" "assets:clobber                                                 # Remove compiled assets" "assets:environment                                             # Load asset compile environment" "assets:precompile                                              # Compile all the assets named in config.assets.precompile" "automation:install:migrations                                  # Copy migrations from automation to application" "browser:open                                                   # Abre el navegador con el tenant seleccionado" "cache_digests:dependencies                                     # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies                              # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "coverage:report[paths]                                         # Collates all result sets generated by the different test runners" "db:_dump                                                       # " "db:_dump:primary                                               # " "db:_dump:shard1                                                # " "db:abort_if_pending_migrations                                 # " "db:abort_if_pending_migrations:primary                         # " "db:abort_if_pending_migrations:shard1                          # " "db:charset                                                     # " "db:check_protected_environments                                # " "db:collation                                                   # " "db:create                                                      # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" "db:create:all                                                  # " "db:create:primary                                              # Create primary database for current environment" "db:create:shard1                                               # Create shard1 database for current environment" "db:drop                                                        # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" "db:drop:_unsafe                                                # " "db:drop:all                                                    # " "db:drop:primary                                                # Drop primary database for current environment" "db:drop:shard1                                                 # Drop shard1 database for current environment" "db:environment:set                                             # Set the environment value for the database" "db:extensions                                                  # Also create shared_extensions Schema" "db:fixtures:dump                                               # Create YAML test fixtures from data in an existing database" "db:fixtures:identify                                           # " "db:fixtures:load                                               # Loads fixtures into the current environment's database" "db:forward                                                     # " "db:load_config                                                 # " "db:migrate                                                     # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                                                # Runs the \"down\" for a given migration VERSION" "db:migrate:down:primary                                        # " "db:migrate:down:shard1                                         # " "db:migrate:primary                                             # Migrate primary database for current environment" "db:migrate:redo                                                # Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:redo:primary                                        # Rolls back primary database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:redo:shard1                                         # Rolls back shard1 database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:reset                                               # " "db:migrate:shard1                                              # Migrate shard1 database for current environment" "db:migrate:status                                              # Display status of migrations" "db:migrate:status:primary                                      # Display status of migrations for primary database" "db:migrate:status:shard1                                       # Display status of migrations for shard1 database" "db:migrate:up                                                  # Runs the \"up\" for a given migration VERSION" "db:migrate:up:primary                                          # " "db:migrate:up:shard1                                           # " "db:prepare                                                     # Runs setup if database does not exist, or runs migrations if it does" "db:purge                                                       # " "db:purge:all                                                   # " "db:reset                                                       # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" "db:rollback                                                    # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:rollback:primary                                            # Rollback primary database for current environment (specify steps w/ STEP=n)" "db:rollback:shard1                                             # Rollback shard1 database for current environment (specify steps w/ STEP=n)" "db:schema:cache:clear                                          # Clears a db/schema_cache.yml file" "db:schema:cache:dump                                           # Creates a db/schema_cache.yml file" "db:schema:dump                                                 # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" "db:schema:dump:primary                                         # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) for primary database" "db:schema:dump:shard1                                          # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) for shard1 database" "db:schema:load                                                 # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" "db:schema:load:primary                                         # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the primary database" "db:schema:load:shard1                                          # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the shard1 database" "db:schema:load_if_ruby                                         # " "db:seed                                                        # Loads the seed data from db/seeds.rb" "db:seed:check:common                                           # Validaciones comunes" "db:seed:check:enterprise                                       # Validaciones seed enterprise" "db:seed:check:migrated_enterprise                              # Validaciones seed enterprise migrado" "db:seed:check:starter                                          # Validaciones seed starter" "db:seed:replant                                                # Truncates tables of each database for current environment and loads the seeds" "db:setup                                                       # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                                              # Dumps the database structure to db/structure.sql" "db:structure:dump:primary                                      # Dumps the primary database structure to db/structure.sql" "db:structure:dump:shard1                                       # Dumps the shard1 database structure to db/structure.sql" "db:structure:load                                              # Recreates the databases from the structure.sql file" "db:structure:load:primary                                      # Recreates the primary database from the structure.sql file" "db:structure:load:shard1                                       # Recreates the shard1 database from the structure.sql file" "db:structure:load_if_sql                                       # " "db:test:load                                                   # " "db:test:load:primary                                           # " "db:test:load:shard1                                            # " "db:test:load_schema                                            # " "db:test:load_schema:primary                                    # " "db:test:load_schema:shard1                                     # " "db:test:load_structure                                         # " "db:test:load_structure:primary                                 # " "db:test:load_structure:shard1                                  # " "db:test:prepare                                                # " "db:test:prepare:primary                                        # " "db:test:prepare:shard1                                         # " "db:test:purge                                                  # " "db:test:purge:primary                                          # " "db:test:purge:shard1                                           # " "db:truncate_all                                                # " "db:version                                                     # Retrieves the current schema version number" "default                                                        # " "docs:er                                                        # Generate ER diagrams" "environment                                                    # " "flaky_test:add_test[file_to_test_with_number]                  # Agrega test a la lista de flakys a partir de un archivo" "galapagos:load_employees_for_billing                           # Genera un proceso de carga de empleados para facturar" "galapagos:tenant:activate_imed                                 # Activa imed en una empresa de un tenant" "galapagos:tenant:after_clone                                   # Finaliza la copia de un tenant en otro" "galapagos:tenant:clear                                         # Limpia la data de un tenant para partir denuevo" "galapagos:tenant:clear_collection_cache                        # Limpia la información de cobranza en caché de un tenant" "galapagos:tenant:configure                                     # Cambia la configuracion de un tenant" "galapagos:tenant:create_default_users                          # Crea usuarios por defecto en los tenant" "galapagos:tenant:deactivate_imed                               # Desactiva imed en una empresa de un tenant" "galapagos:tenant:delete_bukers                                 # Elimina los usuarios con correo buk de un tenant" "galapagos:tenant:drop                                          # Elimina completamente un tenant de la base de datos" "galapagos:tenant:migrate                                       # Migra un tenant específico" "galapagos:tenant:rename                                        # Renombra el schema de un tenant durante el cambio de host de una instancia" "generate_processes:month                                       # Genera el archivo específico en un mes" "generate_processes:process                                     # Genera el archivo específico en un proceso" "good_migrations:disable_autoload                               # " "good_migrations:reenable_autoload                              # " "jobs:check[max_age]                                            # Exit with error status if any jobs older than max_age seconds haven't been attempted yet" "jobs:clear                                                     # Clear the delayed_job queue" "jobs:environment_options                                       # " "jobs:work                                                      # Start a delayed_job worker" "jobs:workoff                                                   # Start a delayed_job worker and exit when all available jobs are complete" "locale:translate                                               # Create YAML locale template for a model" "log:clear                                                      # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "mem_benchmark:test                                             # Corre pruebas de memoria en single y multi threading" "middleware                                                     # Prints out your Rack middleware stack" "models:translations:check[classes_to_ignore]                   # Para correr en CI y asegurarse que los modelos tengan sus traducciones correctas" "modularity:stats                                               # Generate modularity stats for each team and overall" "ownership:check                                                # Validate rules" "ownership:coverage                                             # Get the percentage of owned files" "ownership:details                                              # List every file with its glob and owner" "ownership:owner_for[filepaths]                                 # Return the owner of the given files" "ownership:owners                                               # List available owners" "ownership:pending                                              # List files without owner" "ownership:rules_for[filepath]                                  # Return the rule matches of the given file" "ownership:stats                                                # Generate ownership stats" "parallel:create[count]                                         # Create test databases via db:create --> parallel:create[num_cpus]" "parallel:drop[count]                                           # Drop test databases via db:drop --> parallel:drop[num_cpus]" "parallel:features[count,pattern,options,pass_through]          # Run features in parallel with parallel:features[num_cpus]" "parallel:features-spinach[count,pattern,options,pass_through]  # Run features-spinach in parallel with parallel:features-spinach[num_cpus]" "parallel:load_schema[count]                                    # Load dumped schema for test databases via db:schema:load --> parallel:load_schema[num_cpus]" "parallel:load_structure[count]                                 # Load structure for test databases via db:schema:load --> parallel:load_structure[num_cpus]" "parallel:migrate[count]                                        # Update test databases via db:migrate --> parallel:migrate[num_cpus]" "parallel:prepare[count]                                        # Update test databases by dumping and loading --> parallel:prepare[num_cpus]" "parallel:rake[command,count]                                   # Launch given rake command in parallel" "parallel:rollback[count]                                       # Rollback test databases via db:rollback --> parallel:rollback[num_cpus]" "parallel:seed[count]                                           # Load the seed data from db/seeds.rb via db:seed --> parallel:seed[num_cpus]" "parallel:setup[count]                                          # Setup test databases via db:setup --> parallel:setup[num_cpus]" "parallel:spec[count,pattern,options,pass_through]              # Run spec in parallel with parallel:spec[num_cpus]" "parallel:test[count,pattern,options,pass_through]              # Run test in parallel with parallel:test[num_cpus]" "qa:create                                                      # Create a new tenant qa" "rails_workflow:install:migrations                              # Copy migrations from rails_workflow to application" "railties:install:migrations                                    # " "remove_annotation                                              # Remove schema information from model and fixture files" "remove_routes                                                  # Removes the route map from routes.rb" "restart                                                        # Restart app by touching tmp/restart.txt" "secret                                                         # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "set_annotation_options                                         # " "stats                                                          # Report code statistics (KLOCs, etc) from the application or engine" "tenant:create[tenant,tier,s3_bucket]                           # Create a new tenant" "tenant:db:create[tenant]                                       # Run db:create on a specific tenant" "tenant:db:drop[tenant]                                         # Run db:drop on a specific tenant" "tenant:db:migrate[tenant]                                      # Run db:migrate on a specific tenant" "tenant:db:migrate:down[tenant]                                 # Runs the \"down\" for a given migration VERSION on a specific tenant" "tenant:db:migrate:up[tenant]                                   # Runs the \"up\" for a given migration VERSION on a specific tenant" "tenant:db:reset[tenant]                                        # Run db:reset on a specific tenant" "tenant:seed:enterprise[tenant]                                 # Seeds a specific tenant with enterprise seeds" "tenant:seed:free[tenant]                                       # Seeds a specific tenant with free tier seeds" "tenant:seed:qa[tenant]                                         # Seeds a specific tenant with qa seeds" "tenant:starter:migrate_to_enterprise[tenant]                   # Run in a specific tenant the enterprise seeds" "tenant:starter:setup[tenant]                                   # Set essential data for a tenant" "test                                                           # Runs all tests in test folder except system ones" "test:all                                                       # Runs all tests, including system tests" "test:cells                                                     # Run tests for cells" "test:channels                                                  # " "test:controllers                                               # " "test:db                                                        # Run tests quickly, but also reset db" "test:decorators                                                # Run tests for {:decorators=>\"test:prepare\"}" "test:functionals                                               # " "test:generators                                                # " "test:helpers                                                   # " "test:integration                                               # " "test:jobs                                                      # " "test:mailboxes                                                 # " "test:mailers                                                   # " "test:models                                                    # " "test:prepare                                                   # " "test:run                                                       # " "test:system                                                    # Run system tests only" "test:units                                                     # " "time:zones[country_or_offset]                                  # List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" "time:zones:all                                                 # " "time:zones:local                                               # " "time:zones:us                                                  # " "tmp                                                            # " "tmp/cache                                                      # " "tmp/cache/assets                                               # " "tmp/pids                                                       # " "tmp/sockets                                                    # " "tmp:cache:clear                                                # " "tmp:clear                                                      # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                                                     # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                                                 # " "tmp:screenshots:clear                                          # " "tmp:sockets:clear                                              # " "todo                                                           # Lists filenames which include TODOs and the owner team" "todo:table                                                     # Lists filenames which include TODOs and the owner team in table format" "traceroute                                                     # Prints out unused routes and unreachable action methods" "traceroute:unreachable_action_methods                          # Prints out unreachable action methods" "traceroute:unused_routes                                       # Prints out unused routes" "users:change_passwords[activate,invitation_token]              # Cambia las contraseñas de todos los usuarios a \"password\", opcionalmente los puede activar y setear el invitation_token a nil" "users:create_admin                                             # " "users:create_all                                               # Creación de usuarios predefinidos para probar la aplicación" "users:create_limit_rrhh                                        # " "users:create_rrhh                                              # " "users:create_superadmin                                        # " "users_seleccion:create_all                                     # Creación de usuarios con permisos de selección/onboarding/workflow" "webpacker                                                      # Lists all available tasks in Webpacker" "webpacker:binstubs                                             # Installs Webpacker binstubs in this application" "webpacker:check_binstubs                                       # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                                           # Verifies if Node.js is installed" "webpacker:check_yarn                                           # Verifies if Yarn is installed" "webpacker:clean[keep,age]                                      # Remove old compiled webpacks" "webpacker:clobber                                              # Remove the webpack compiled output directory" "webpacker:compile                                              # Compile JavaScript packs using webpack for production with digests" "webpacker:info                                                 # Provide information on Webpacker's environment" "webpacker:install                                              # Install Webpacker in this application" "webpacker:install:angular                                      # Install everything needed for Angular" "webpacker:install:coffee                                       # Install everything needed for Coffee" "webpacker:install:elm                                          # Install everything needed for Elm" "webpacker:install:erb                                          # Install everything needed for Erb" "webpacker:install:react                                        # Install everything needed for React" "webpacker:install:stimulus                                     # Install everything needed for Stimulus" "webpacker:install:svelte                                       # Install everything needed for Svelte" "webpacker:install:typescript                                   # Install everything needed for Typescript" "webpacker:install:vue                                          # Install everything needed for Vue" "webpacker:verify_install                                       # Verifies if Webpacker is installed" "webpacker:yarn_install                                         # Support for older Rails versions" "yard_namespaces:generate                                       # Generar archivo de namespaces para YARD" "yarn:install                                                   # Install all JavaScript dependencies as specified via Yarn" "zeitwerk:check                                                 # Checks project structure for Zeitwerk compatibility")))