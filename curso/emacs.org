* Emacs
+ [[Instalación]]
+ [[Iniciando emacs]]
+ [[Definición de conceptos]]
+ [[Comandos básicos]]
+ [[*Org Mode][Org Mode]]
+ [[Org Mode en la vida diaria]]

** Instalación
*** Compilación e instalación de emacs
**** Instar las dependencias necesarias

Emacs es un programa muy extenso y necesita de distintas bibliotecas
para poder ser compilado correctamente, a continuación se encuentra la
lista de dependencias necesarias:

#+begin_src sh :dir "/sudo::" :exports code
  sudo apt-get install curl build-essential automake texinfo libjpeg-dev libncurses5-dev libtiff5-dev libgif-dev libpng-dev libxpm-dev libgnutls28-dev libmagick++-dev libgtk-3-dev build-essential git fonts-symbola fonts-firacode automake g++ gcc libpng-dev libpoppler-dev libpoppler-glib-dev libpoppler-private-dev libz-dev make pkg-config dh-autoreconf ditaa plantuml libtool-bin cmake w3m w3m-img libjansson-dev
#+end_src

Es momento de descargar la herramienta de graficación llamada
=plantuml=, para ello debes ir a este [[http://sourceforge.net/projects/plantuml/files/plantuml.jar/download][enlace]] y mover el archivo =.jar=
a la carpeta =/usr/share/plantuml/=:

#+begin_src sh :dir "/sudo::" :exports code
  sudo mkdir /usr/share/plantuml
  sudo find . -name "plantuml.jar" --exec mv {} /usr/share/plantuml/ \;
  sudo chmod 755 -R /usr/share/plantuml/
#+end_src

#+RESULTS:

El siguiente paso es descargar una copia del código fuente de emacs,
configurar los archivos de compilación, compilar emacs y por último
instalarlo en el sistema, el siguiente bloque de código contiene todas
esas instrucciones.

#+begin_src sh :dir "/sudo::" :exports code
  mkdir ~/src
  sudo apt-get update
  sudo apt-get install git
  cd ~/src/emacs
  git clone -b master git://git.sv.gnu.org/emacs.git
  ./autogen.sh
  ./configure --enable-autodepend --with-libsystemd --with-modules --with-json --with-x-toolkit=gtk --with-mailutils --with-imagemagick --with-jpeg --with-tiff --with-gif --with-png --with-rsvg --with-libotf --with-xaw3d --with-gpm --with-json --with-threads --enable-link-time-optimization
  make -j$(nproc) -s bootstrap
  sudo make -j$(nproc) -s install
#+end_src

Si te encuentran en un sistema que no tiene soporte para =systemd= es
mejor cambiar la línea de =configure= por lo siguiente:

#+begin_src sh :dir "/sudo::" :exports code
  ./configure --enable-autodepend --without-libsystemd --with-modules --with-json --with-x-toolkit=gtk --with-mailutils --with-imagemagick --with-jpeg --with-tiff --with-gif --w
  ith-png --with-rsvg --with-libotf --with-xaw3d --with-gpm --with-json --with-threads --enable-link-time-optimization --with-native-compilation CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer"
#+end_src

En este punto ya tenemos instalado emacs en nuestro sistema, lo que
sigue es añadir a nuestro =PATH= la carpeta =/usr/local/bin/=:

#+begin_src sh :dir "/sudo::" :exports code
echo "export PATH=$PATH:/usr/local/bin" >> ~/.bashrc
#+end_src

Si todo salió bien la salida del comando =emacs -q --version= deberá
mostrar un número muy avanzado.

***** Actualización de nuestra verisón de emacs

El código fuente de emacs se encuentra en constante cambio, es por eso
que se recomienda *actualizar* nuestra instalación una vez por semana,
el proceso de actualización es simple:

#+begin_src sh :dir "/sudo::" :exports code
  cd ~/src/emacs
  git pull
  ./configure --enable-autodepend --with-libsystemd --with-modules --with-x-toolkit=gtk --with-mailutils --with-imagemagick --with-jpeg --with-tiff --with-gif --with-png --with-rsvg --with-libotf --with-xaw3d --with-gpm --with-json --with-threads --enable-link-time-optimization
  make -j$(nproc) -s bootstrap
  sudo make -j$(nproc) -s install
#+end_src

Esto descargarà la última versión del código y compilara las partes
que han cambiado respecto a tu versión local.

**** Instalación de soporte para correo en emacs

El soporte para lectura del correo electrónico depende de dos
porgramas ajenos a emacs: =mu4e= y =offlineimap=. Las siguientes
instrucciones descargarán las dependencias necesarias para poder
obtener soporte de correo dentro de una sesión de emacs:

#+begin_src sh :dir "/sudo::" :exports code
  sudo apt install offlineimap guile-2.0-dev html2text xdg-utils libgmime-3.0-dev libxapian-dev
  cd ~/src/
  git clone https://github.com/djcb/mu.git
  cd mu
  ./autogen.sh
  ./configure
  make -j$(nproc) -s
  sudo make -j$(nproc) -s install
#+end_src

Es momento de configurar =offlineimap= para indicarle cuál es nuestro
servidor de correo y las cuentas que deseamos agregar:

#+begin_src
    [general]
    accounts = Gmail
    maxsyncaccounts = 3

    [Account Gmail]
    localrepository = Local
    remoterepository = Remote
    autorefresh = 5
    quick = 10
    postsynchook = mu index --maildir ~/Maildir

    [Repository Local]
    type = Maildir
    localfolders = ~/Maildir

    [Repository Remote]
    type = IMAP
    remotehost = imap.gmail.com
    remoteuser = user@gmail.com
    remotepass = mysecretpassword
    postsynchook = mu index --maildir ~/Maildir
    ssl = yes
    maxconnections = 1
    sslcacertfile = /etc/ssl/certs/ca-certificates.crt
    folderfilter = lambda foldername: foldername in ['INBOX', 'Sent', '[Gmail]/INBOX', '[Gmail]/Sent', '[Gmail].Enviados']
#+end_src

Lo único que hay que cambiar aquí es la cuenta =user@gmail.com= y su
respectiva contraseña. Antes de poder probar nuestra configuración
debes permitir que tu cuenta pueda ser accedida por *aplicaciones
menos seguras*, esta opción pude ser consultada [[https://myaccount.google.com/lesssecureapps][aquí.]]

Por último hay que probar nuestra configuración, dentro de la línea de
comandos debemos ejecutar =offlineimap= y como resultado debemos
esperar a que aparezca una línea que diga =***** Finished processing
account Gmail=, el último paso es indexar el correo para obtener
búsquedas más rápidas sin necesidad de descargar la información desde
el servidor de correo electrónico:

#+begin_src sh :dir "/sudo::" :exports code
  offlineimap
  mu init --maildir ~/Maildir --my-address user@gmail.com
#+end_src

#+RESULTS:

**** Extra :: Instalación con compilación nativa
Por defecto emacs utiliza =elisp= para ejecutar todo, salvo su núcleo
que está escrito en =C=, esto implica que hay que interpretar la mayor
parte de la funcionalidad de emacs antes de ejecutarla, a finales del
año 2019 se aceptó como parte del proyecto emacs una solución que toma
el bytecode de lisp y lo pasa por un compilador de C para generar
código nativo de máquina, mejorando en un 200% o más la velocidad de
ejecución de emacs, paquetes como =swiper=, =projectile= y =magit= se
ven beneficiados por esto. Si tu deseas acelerar la ejecución de emacs
necesitas seguir esta sección:

#+begin_src sh
  sudo apt-get -y install curl build-essential automake texinfo libjpeg-dev libncurses5-dev libtiff5-dev libgif-dev libpng-dev libxpm-dev libgnutls28-dev libmagick++-dev libgtk-3-dev build-essential git fonts-symbola fonts-firacode automake g++ gcc libpng-dev libpoppler-dev libpoppler-glib-dev libpoppler-private-dev libz-dev make pkg-config dh-autoreconf ditaa plantuml libtool-bin cmake w3m w3m-img
  git clone -b master git://git.sv.gnu.org/emacs.git
  cd emacs
  git checkout -b native-comp origin/feature/native-comp
  sudo apt-get -y install libgccjit-10-dev
  ./autogen.sh
  ./configure --enable-autodepend --with-libsystemd --with-modules --with-x-toolkit=gtk --with-mailutils --with-imagemagick --with-jpeg --with-tiff --with-gif --with-png --with-rsvg --with-libotf --with-xaw3d --with-gpm --with-json --with-threads --enable-link-time-optimization --with-nativecomp CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer"
  make -j$(nproc) -s
  sudo make -j$(nproc) -s install
#+end_src

La parte de =configure= mandará una advertencia diciendo que los
=smoke tests= de =libgccjit= no pudieron realizarse, esto puede
ignorarse y podemos seguir con la compilación. Una vez compilado
deberás reanudar los pasos explicados en secciones anteriores.

**** Instalación en Windows con WSL2
Para poder trabajar en WSL2 es necesario instalar al menos la versión
10 de gcc. Como paso extra se agrega al =.bashrc= las variables de
entorno para compartir el display, para ver el modo gráfico de emacs
es necesario instalar =VcXsrv= y configurarlo de manera adecuada.

#+begin_src sh
    sudo apt update
    sudo apt install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
    sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
    sudo apt update
    sudo apt install install -y gcc-10 libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev git curl build-essential automake texinfo libjpeg-dev libncurses5-dev libtiff5-dev libgif-dev libpng-dev libxpm-dev libgnutls28-dev libmagick++-dev libgtk-3-dev build-essential git fonts-symbola fonts-firacode automake g++ gcc libpng-dev libpoppler-dev libpoppler-glib-dev libpoppler-private-dev libz-dev make pkg-config dh-autoreconf ditaa plantuml libtool-bin cmake w3m w3m-img
    export CC="gcc-10"
    ./autogen.sh
    ./configure --enable-autodepend --with-libsystemd --with-modules --with-x-toolkit=gtk --with-mailutils --with-imagemagick --with-jpeg --with-tiff --with-gif --with-png --with-rsvg --with-libotf --with-xaw3d --with-gpm --with-json --with-threads --enable-link-time-optimization --with-nativecomp CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer"
    make -j$(nproc) -s
    sudo make -j$(nproc) -s install
    echo "export CC=/usr/bin/gcc-10 CXX=/usr/bin/gcc-10" | tee -a ~/.bashrc
    echo "export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0" | tee -a ~/.bashrc
    echo "export DISPLAY=127.0.0.1:0.0" | tee -a ~/.bashrc
    echo "export LIBGL_ALWAYS_INDIRECT=1" | tee -a ~/.bashrc
    setxkbmap dvorak
#+end_src

Ahora hay que abrir una ventana de Ubuntu y esperar la instalación de
las dependencias. Por último debemos ejecutar =M-x all-the-icons-install-fonts=

**** Instalación de la configuración
Para utilizar emacs de manera rápida puedes utilizar una configuración
realizada por un tercero. A continuación se muestra cómo copiar la
configuración declarada en este repositorio:

#+begin_src shell
  cd ~/.config
  git clone https://github.com/camachojua/emacs_conf emacs
#+end_src

Posteriormente se debe lanzar emacs, el instalador comenzará a
descargar los paquetes necesarios (lo cual puede tardar un poco). En
algún punto preguntará si se desea compilar un programa, descargar
dependencias y por último si se desea recompilar *hay que responder
afirmativamente a todas las preguntas* (puede que en algún punto se te
solicite tu contraseña de =sudo=, esto se debe a que hay que instalar
en directorios privilegiados el programa =epdfinfo=). Una vez
terminado este proceso se mostrará el *dashboard*, prodecederemos a
cerrar y abrir nuevamente emacs.

Por último hay que instalar las fuentes de íconos para que tengamos
una experiencia visual agradable esto lo hacemos presionando =M-x
all-the-icons-install-fonts=.

** Iniciando emacs

Cuando emacs se ejecuta sin ninguna configuración extra en un ambiente
gráfico se mostrará una ventana muy similar a la de la siguiente imagen:

[[file:img/emacs_basico.png]]

Emacs es un editor modular con mucha capacidad, sin embargo esta
modularidad hizo necesario la creación de terminología especial para
hacer referencia a las distintas partes que componen la ventana
gráfica que los usuarios ven. A continuación se muestra una lista
básica de los elementos que componen una ventana gráfica de emacs.

- *Frame* Es la ventana gráfica (lo que se dibuja al ejecutar emacs),
  usualmente los usuarios trabajan sobre una única ventana gráfica
  durante sus sesiones de edición, sin embargo emacs es capaz de
  manejar múltiples frames de manera simultánea.

  Los frames están compuestos de múltiples regiones, en la parte
  superior del frame se puede ver la *barra de menú*, esta barra
  aparece típicamente en la mayoría de los programas que poseen una
  interfaz gráfica, contiene secciones como: =archivo=, =edición=,
  =opciones=, etc. Bajo la barra de menú se encuentra una *barra de
  herramientas* que contiene íconos a las acciones de edición más
  comunes: =abrir archivo=, =nuevo archivo=, =guardar=, =cortar=,
  =copiar=, =pegar=, etc. En la parte inferior del frame se encuentra
  una región denominada *área de echo* donde es posible insertar
  comandos y donde los mensajes de información aparecen.
- *Ventana* Es el área que se encuentra entre la barra de herramientas
  y el área de echo, _cuidado_ no hay que confundir el concepto de
  ventana de emacs (área de edición de texto) y ventana de programa
  (concepto de interfaz gráfica). Recuerda que lo dibujado por el
  sistema gráfico se conoce como frame en el lenguaje de emacs.
- *Modeline* Se encuentra sobre el área de echo, en la configuración
  inicial de emacs posee un fondo gris, esta región muestra
  información relevante al *modo de edición actual* como: estado de
  guardado del archivo, número de línea donde se encuentra el cursor,
  etc.
- *Barra de scroll* Ubicada a la izquierda del frame, utilizada para
  desplazarse por el archivo utilizando el mouse.

Cuando se inicia emacs el comportamiento por defecto es el de crear un
único frame, sin embargo el usuario puede crear más ventanas dentro de
este frame de manera totalmente independiente.

Existe una única "restricción" en la configuración por defecto *sólo
puede haber una única ventana activa* (usualmente es la que tiene el
cursor que parpadea).

*** Buffers

Emacs utiliza *buffers* para poder editar archivos, un buffer es un
archivo cargado dentro de emacs, es un ente que puede moverse entre
ventanas pero no puede ser mostrado sin ellas, es decir, para poder
mostrar el contenido de un archivo dentro de emacs es necesario crear
un buffer dentro de una ventana. La mayor parte de edición dentro de
emacs (si no es que toda) ocurre dentro de los buffers.

*** Distribuciones de emacs
**** Centaur Emacs
**** DOOM Emacs
**** Spacemacs
** Definición de conceptos
*** Buffer

En emacs la única manera de visitar (visualizar) y editar un archivo
es a través de un buffer. Los buffers tienen un nombre único, este
nombre se muestra en la barra del modo de edición, los nombres de los
buffers son sensibles a las mayúsculas y minúsculas.

Emacs puede crear una infinidad de buffers, sin embargo sólamente un
buffer puede ser mostrado por ventana (si hay múltiples ventanas y un
solo buffer se mostrará dicho buffer en las múltiples ventanas) y más
importante *sólo un buffer puede ser seleccionado como buffer actual*,
existen comandos que operan sobre un buffer (como =M-x eval-buffer=).

Existe un límite en el tamaño de un buffer (en bytes) debido al tipo
de dato que emacs utiliza para representarlos, típicamente para una
computadora con un procsador de 64-bits el tamaño máximo de un buffer
es de /2^61 - 2/ bytes (alrededor de 2 exbibytes), mientras que en
equipos con un procesador de 32 bits el máximo es de aproximadamente
512 MiB. Obviamente este límite depende de la cantidad de memoria
instalada en el sistema.

*** Modos de edición
*** Mini-buffer
*** Kill-ring
** Comandos básicos
*** Moverse por la pantalla
+ Para seleccionar todo el buffer =C-x h=.
+ Para cambiar de ventana =C-x w <n>=, donde =<n>= es el número de
  ventana indicado en la parte inferior izquierda del frame.
  + Podemos ir directamente al gestor de proyectos presionando =M-0=.
+ Para abrir el gestor deproyectos presionar =C-x t t=.
  + Podemos añadir un nuevo proyecto al gestor presionando =C-x t n=.
*** Guardar un archivo
*** Abrir un archivo
** Org Mode
*** ¿Qué es Org Mode?

Org es un modo de edición para crear notas, mantener listas de cosas
por hacer y planear proyectos a través de un lenguaje de marcado de
texto, permitiendo generar resultados reproducibles y portables. Este
modo de edición permite mantener archivos enormes en una estructura
bien organizada con la habilidad de visitar partes del archivo sin
necesidad de recorrer todo el contenido del mismo debido a que la
información se estructura en forma de árbol.

Dentro de las amenidades que ofrece este modo de edición se encuentra
el soporte para crear tablas, enlaces a las distintas partes del
archivo, correo electrónico, capacidad para exportar el texto plano en
múltiples formatos como: html, LaTeX, pdf, markdown, etc.

Los archivos Org soportan la inclusión de bloques de código fuente,
permitiendo su evaluación dentro del mismo documento, creando un
sistema de información interactiva y totalmente reproducible.

*** Estructura de un documento =.org=
**** Editar la estructura
*** Estilos de texto

- Negritas :: Se insertan rodeando la palabra con *asteríscos* =*palabra*=.
- Itálicas :: Se insertan rodeando la palabra con /diagonales/ =/palabra/=.
- Subrayado :: Se insertan rodeando la palabra con _guiones_ =_palabra_=.
- Monoespaciado :: Se inserta rodeando la palabra con ~churros~ =~palabra~=.
- Tachado ::  Se inserta rodeando la palabra con el signo de +más+ =+palabra+=.

*** Enlaces

Org permite crear enlaces a diferentes medios de información, los
enlaces más sencillos son aquellos que apuntan a distintas partes del
documento, para insertar un enlace basta con poner entre corchetes
dobles el título de una sección del documento:

#+BEGIN_SRC org
[[Introducción]]
#+END_SRC

De esta forma podemos al dar clic en dicho enlace el cursor se
posicionará en la sección /Introducción/ del documento. El comando de
emacs que nos ayuda a escribir enlaces más rápido es =C-c C-l= el cual
nos preguntará qué tipo de enlace queremos crear (a un archivo, URL,
email, etc.) seguido del texto que hará referencia a ese vínculo.

Para crear  un enlace  a otro  documento dentro  del mismo  sistema de
archivos basta con poner la ruta (absoluta o relativa) del documento a
enlazar, como ejemplo se crea un enlace al archivo [[file:../README.md][README]] de este proyecto:

#+BEGIN_SRC org
[[file:../README.md][README]]
#+END_SRC

Es posible crear enlaces a líneas específicas, supongamos que queremos
crear un enlace a la línea 42 del archivo =README.md= de este
proyecto, para ello debemos especificar la ruta relativa del archivo y
después indicar el número de línea a la cual deseamos apuntar, esto
último se indica con un separador de columna =::=, el enlace completo
quedará descrito de la siguiente manera:

#+BEGIN_SRC org
[[file:../README.md::42][Enlace de prueba]]
#+END_SRC

**** Crear tus propios enlaces

En emacs es fácil crear enlaces a todo tipo de información, como
ejemplo podemos crear un enlace a un recurso multimedia alojado en
youtube, para ello debemos editar el archivo =init.el= de emacs y
crear la función que generará nuestro enlace:

#+BEGIN_SRC emacs-lisp
  (defun crea-enlace-youtube (youtube-id)
    (browse-url (concat "https://www.youtube.com/embed/" youtube-id)))

  (org-add-link-type "yt" #'crea-enlace-youtube)
#+END_SRC

Después de definir ese tipo de enlace evaluamos la función insertando
el comando =M-x eval-buffer=, con la lista de enlaces actualizados es
posible insertar un enlace a un vídeo de youtube utilizando el comando
=C-c C-l yt=:

#+BEGIN_SRC org
[[yt:55eTdnEqcUo][te alegrará el día]]
#+END_SRC

*** Listas

En Org podemos generar diversos tipos de listas para diversas
situaciones, las más comunes son: listar cosas sin importarnos su
orden de aparición (listas no ordenadas), listar cosas donde el orden
sí importa (listas ordenadas), crear lista de cosas por hacer y crear
sublistas a partir de otras listas. Esta sección nos mostrará maneras
sencillas de generar diversos tipos de listas que nos serán útiles en
múltiples escenarios.

El tipo de lista más común es la lista no ordenada, la cual consiste
en un conjunto de elementos donde el primer caracter puede ser delimitado con: =+=,
=-=, =coso=. Por ejemplo:

#+BEGIN_SRC org
  - Primer elemento
  - Segundo elemento
  - Tercer elemento
#+END_SRC

Un elemento de una lista puede contener cualquier tipo de información,
en particular puede contener otra lista, las sublistas son declaradas
generando un /nivel de indentación/ mayor al del elemento de la
sublista al cual pertenecen:

#+BEGIN_SRC org
  - Primer elemento
    - Primer subelemento
    - Segundo subelemento
    - Tercer subelemento
#+END_SRC

**** Lista de cosas por hacer

Las listas de cosas por hacer (/todo's/ en inglés) son listas que,
como su nombre lo indica, muestran cosas por hacer, este tipo de
listados se caracterizan por ser interactivos: el usuario puede marcar
qué tareas fueron terminadas y el sistema mostrará el progreso global
de todas las tareas. Se declaran añadiendo corchetes después del
símbolo de elemento en una lista =[ ]=:

#+BEGIN_SRC org
  + [ ] Elemento de una lista de cosas por hacer.
#+END_SRC

Para poder ver el progreso de un conjunto de tareas la lista debe
estar definida como parte de una sección del texto, después de definir
el título de la sección debe insertarse el comando =C-c C-t= para
insertar automáticamente cabeceras que indican el estado general de
los trabajos asociados a esta sección (existe un atajo asociado al
comando =C-S Enter=):

#+BEGIN_SRC org
  ,* TODO Trabajo súper importante

    + [ ] Primer tarea.
      + [ ] Subtarea.
      + [ ] Subtarea.
    + [ ] Segunda tarea.
#+END_SRC

**** Lista de definiciones

*** Tablas
**** Hojas de cálculo
*** Exportación
*** Agenda
Org contiene una agenda para ayudarnos a administrar las tareas
pendientes que tenemos en nuestras listas de cosas por hacer. Así como
podemos tener múltiples archivos =org= también podemos tener múltiples
archivos para organizar la agenda, antes de continuar debemos
indicarle a emacs la ubicación de dichos archivos:

#+begin_src elisp
  (setq org-agenda-files '("~/org/trabajo.org"
                           "~/org/tareasPrioritarias.org"
                           "~/org/lecturasPendientes.org"
                           "~/org/proyectosSencillos.org"))
#+end_src

Org buscará dentro de estos archivos por elementos que se encuentren
en una lista de cosas por hacer y los organizará de acuerdo al día
para el que fueron calendarizados. Para añadir un elemento a la agenda
este elemento debe estar dentro de una lista de cosas por hacer, el
cursor debe estar sobre la cabecera de la lista y debemos insertar el
comando =C-c C-s= el cuál ejecutará la función =org-schedule=, un
calendario aparecerá y se podrà elegir una fecha posterior para
agendar la tarea. Para ver los elementos agredados insertamos el
comando =M-x org-agenda a=. En este nuevo buffer podemos presionar =l=
para ver con màs detalle las tareas que debemos hacer el dìa de hoy.

*** Bloques de código

En =Org Mode= es posible definir bloques de texto que pueden ser
evaluados para mostrar su resultado dentro de nuestros archivos
=.org=, estos bloques son conocidos como *bloques de código* su
estructura es la siguiente:

#+BEGIN_SRC org
,#+BEGIN_SRC lenguaje
codigo
,#+END_SRC
#+END_SRC

Para ejecutar el codigo =codigo= que se encuentra escrito en el
lenguaje =lenguaje= hay que insertar el comando =C-c C-c=, el
resultado se añadirá en un bloque nuevo llamado =#+RESULTS:=, como
ejemplo crearemos un bloque de código en =bash= que muestre el
contenido del directorio =/etc=:

#+BEGIN_SRC org
,#+BEGIN_SRC sh :dir /etc
ls
,#+END_SRC
#+END_SRC

El parámetro =:dir= ejecuta el código sobre el directorio que se
indica, es tan versátil que no está limitado a directorios locales ya
que es posible indicar un directorio remoto:

#+BEGIN_SRC org
,#+BEGIN_SRC sh :dir /registro.fciencias.com:
hostname -f
,#+END_SRC

,#+RESULTS:
: registro.fciencias.unam.mx
#+END_SRC

**** Inserción de parámetros a los bloques de código

Los parámetros que se le pasan a los bloques de código pueden ser
especificados en distintos lugares:

- En línea :: Después de definir el lenguaje del bloque.
- Por sección :: Todos los bloques de una sección tomarán los mismos
                 parámetros.
- Por documento :: Los parámetros son globales al documento.
- Globales :: Todos los bloques creados dentro del sistema tendrán los
              mismos parámetros.

Los parámetros globales se encuentran definidos en las siguientes
variables de emacs:

#+BEGIN_SRC emacs-list
org-babel-default-header-args
org-babel-default-header-args:<lenguaje>
#+END_SRC

Cuando se desea insertar el nombre de una variable aleatoria se le
debe insertar después de la etiqueta =:var=:

#+BEGIN_SRC org
,#+BEGIN_SRC sh :dir /etc :var MUNDO="emacs"
echo "Hola, ${MUNDO}"
,#+END_SRC
#+END_SRC

Si el número de parámetros es muy grande insertarlos en línea se
vuelve complicado, para ello existe la cabecera =#+HEADER:= la cual
nos permite definir variables que serán utilizadas por el bloque de
código que le sigue:

#+BEGIN_SRC org
,#+HEADER: :var MUNDO="emacs"
,#+BEGIN_SRC sh :dir /etc
echo "Hola, ${MUNDO}"
,#+END_SRC
#+END_SRC

** Org Mode en la vida diaria
*** Crear un archivo =init.el=
